'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RDFS_LABEL = 'http://www.w3.org/2000/01/rdf-schema#label';
var RDFS_COMMENT = 'http://www.w3.org/2000/01/rdf-schema#comment';

var JsonLdUtils = function () {
    function JsonLdUtils() {
        (0, _classCallCheck3.default)(this, JsonLdUtils);
    }

    (0, _createClass3.default)(JsonLdUtils, null, [{
        key: 'getJsonAttValue',


        /**
         * Gets value of the specified attribute.
         *
         * If the attribute value is a string, it is returned, otherwise a '@value' attribute is retrieved from the nested
         * object.
         * @param obj Object from which the attribute value will be extracted
         * @param att Attribute name
         * @param by (optional) JSON attribute to use instead of '@value' in case the att value is an object
         * @return {*} Attribute value (possibly null)
         */
        value: function getJsonAttValue(obj, att) {
            var by = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

            return obj[att] != null ? (0, _typeof3.default)(obj[att]) !== 'object' ? obj[att] : obj[att][by ? by : '@value'] : null;
        }

        /**
         * Checks whether the specified JSON-LD object has the specified property value.
         *
         * The property can either have single value, or it can be an array (in which case the value is searched for in the
         * array) or an object with id corresponding to the value.
         * @param object The object to test
         * @param property The property to test
         * @param value The value to look for
         * @return {*|boolean}
         */

    }, {
        key: 'hasValue',
        value: function hasValue(object, property, value) {
            return object[property] && (object[property] === value || object[property]['@id'] === value || object[property].indexOf && object[property].indexOf(value) !== -1);
        }

        /**
         * Gets localized value from the data, if available.
         *
         * If 'data' is an array of objects with language tag and value, value matching the specified locale is
         * returned. If 'data' is an object, its '@value' attribute is returned. If neither case is true, the
         * 'data' itself is returned.
         * @param data Data from which localized value should be extracted
         * @param intl Internationalization object, containing the 'locale' and 'defaultLocale' attributes
         * @return {*}
         */

    }, {
        key: 'getLocalized',
        value: function getLocalized(data, intl) {
            var locale = intl.locale,
                defaultLocale = intl.defaultLocale,
                defaultValue,
                i,
                len;
            if (!data) {
                return null;
            }
            if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== 'object' && !Array.isArray(data)) {
                return data;
            }
            if (!Array.isArray(data)) {
                return data['@value'];
            }
            for (i = 0, len = data.length; i < len; i++) {
                if (data[i]['@language']) {
                    if (data[i]['@language'] === locale) {
                        return data[i]['@value'];
                    } else if (data[i]['@language'] === defaultLocale) {
                        defaultValue = data[i]['@value'];
                    }
                }
            }
            return defaultValue;
        }

        /**
         * Transforms JSON-LD (framed) based options list into a list of options suitable for the Typeahead component.
         * @param options The options to process
         * @param intl Object containing locale info
         */

    }, {
        key: 'processTypeaheadOptions',
        value: function processTypeaheadOptions(options, intl) {
            if (!options) {
                return [];
            }
            return options.map(function (item) {
                return JsonLdUtils.jsonLdToTypeaheadOption(item, intl);
            });
        }

        /**
         * Gets the specified JSON-LD object as a simple, more programmatic-friendly object suitable e.g. for typeahead
         * components.
         *
         * The transformation is as follows:
         * <ul>
         *     <li>'@id' -> id</li>
         *     <li>'@type' -> type</li>
         *     <li>rdfs:label -> name</li>
         *     <li>rdfs:comment -> description</li>
         * </ul>
         * @param jsonLd
         * @param intl Object containing locale info
         */

    }, {
        key: 'jsonLdToTypeaheadOption',
        value: function jsonLdToTypeaheadOption(jsonLd, intl) {
            if (!jsonLd) {
                return null;
            }
            var res = {
                id: jsonLd['@id'],
                type: jsonLd['@type'],
                name: intl ? JsonLdUtils.getLocalized(jsonLd[RDFS_LABEL], intl) : JsonLdUtils.getJsonAttValue(jsonLd, RDFS_LABEL)
            };
            if (jsonLd[RDFS_COMMENT]) {
                res.description = intl ? JsonLdUtils.getLocalized(jsonLd[RDFS_COMMENT], intl) : JsonLdUtils.getJsonAttValue(jsonLd, RDFS_COMMENT);
            }
            return res;
        }

        /**
         * Transforms the specified JSON-LD input to a list of objects suitable as options for a Select component.
         *
         * This means, that the resulting list consists of objects with value, label and title attributes.
         * @param jsonLd The JSON-LD to process
         * @param intl Object containing locale info
         * @return {*} List of options
         */

    }, {
        key: 'processSelectOptions',
        value: function processSelectOptions(jsonLd, intl) {
            return jsonLd.map(function (item) {
                return JsonLdUtils.jsonLdToSelectOption(item, intl);
            });
        }

        /**
         * Transforms the specified JSON-LD object to an object suitable as option for a select component.
         *
         * @param jsonLd The JSON-LD item to process
         * @param intl Object containing locale info
         * @return {{value: *, label: *, title: *}}
         */

    }, {
        key: 'jsonLdToSelectOption',
        value: function jsonLdToSelectOption(jsonLd, intl) {
            if (!jsonLd) {
                return null;
            }
            return {
                value: jsonLd['@id'],
                label: intl ? JsonLdUtils.getLocalized(jsonLd[RDFS_LABEL], intl) : JsonLdUtils.getJsonAttValue(jsonLd, RDFS_LABEL),
                title: intl ? JsonLdUtils.getLocalized(jsonLd[RDFS_COMMENT], intl) : JsonLdUtils.getJsonAttValue(jsonLd, RDFS_COMMENT)
            };
        }
    }, {
        key: 'RDFS_LABEL',
        get: function get() {
            return RDFS_LABEL;
        }
    }, {
        key: 'RDFS_COMMENT',
        get: function get() {
            return RDFS_COMMENT;
        }
    }]);
    return JsonLdUtils;
}();

exports.default = JsonLdUtils;