'use strict';

/**
 * JSON-LD example, framed.
 * @type {*[]}
 */
var JSON_LD = [
    {
        "@id": "http://onto.fel.cvut.cz/ontologies/eccairs-3.4.0.2/vl-a-430/v-1",
        "@type": "http://onto.fel.cvut.cz/ontologies/eccairs/occurrence-category",
        "http://www.w3.org/2000/01/rdf-schema#comment": "Usage Notes:\r\n• This category includes the intentional maneuvering of the aircraft to avoid a collision with terrain, objects/obstacles, weather or other aircraft (Note: The effect of intentional maneuvering is the key consideration).\r\n• Abrupt maneuvering may also result in a loss of control or system/component failure or malfunction. In this case, the event is coded under both categories (e.g., AMAN and Loss of Control–Inflight (LOC–I), AMAN and System/Component Failure or Malfunction (Non- Powerplant) (SCF–NP), or AMAN and System/Component Failure or Malfunction\r\n(Powerplant) (SCF–PP)).\r\n• Abrupt maneuvering may also occur on ground; examples include hard braking maneuver, rapid change of direction to avoid collisions, etc.",
        "http://www.w3.org/2000/01/rdf-schema#label": "1 - AMAN: Abrupt maneuvre"
    },
    {
        "@id": "http://onto.fel.cvut.cz/ontologies/eccairs-3.4.0.2/vl-a-430/v-10",
        "@type": "http://onto.fel.cvut.cz/ontologies/eccairs/occurrence-category",
        "http://www.w3.org/2000/01/rdf-schema#comment": "Usage Notes:\r\n• Includes accumulations that occur inflight or on the ground (i.e., deicing-related).\r\n• Carburetor and induction icing events are coded in the FUEL Related (FUEL) category.\r\n• Windscreen icing which restricts visibility is also covered here.\r\n• Includes ice accumulation on sensors, antennae, and other external surfaces.\r\n• Includes ice accumulation on external surfaces including those directly in front of the engine intakes.",
        "http://www.w3.org/2000/01/rdf-schema#label": "10 - ICE: Icing"
    },
    {
        "@id": "http://onto.fel.cvut.cz/ontologies/eccairs-3.4.0.2/vl-a-430/v-100",
        "@type": "http://onto.fel.cvut.cz/ontologies/eccairs/occurrence-category",
        "http://www.w3.org/2000/01/rdf-schema#comment": "Usage Notes:\r\n• May be used as a precursor to CFIT, LOC-I or LALT.\r\n• Applicable if the pilot was flying according to Visual Flight Rules (VFR), as defined in Annex 2 – Rules of the Air – to the Convention on International Civil Aviation and by any reason found oneself inadvertently in IMC\r\n• Only to be used when loss of visual references is encountered,\r\n• Only to be used if pilot not qualified to fly in IMC and/or aircraft not equipped to fly in IMC",
        "http://www.w3.org/2000/01/rdf-schema#label": "100 - UIMC: Unintended flight in IMC"
    },
    {
        "@id": "http://onto.fel.cvut.cz/ontologies/eccairs-3.4.0.2/vl-a-430/v-101",
        "@type": "http://onto.fel.cvut.cz/ontologies/eccairs/occurrence-category",
        "http://www.w3.org/2000/01/rdf-schema#label": "101 - EXTL: External load related occurrences"
    }
];

describe('Utility functions tests', function () {

    var JsonLdUtils = require('../../src/jsonld-utils').default;

    describe('processTypeaheadOptions', () => {
        it('transforms JSON-LD input into Typeahead-friendly format', () => {
            var result = JsonLdUtils.processTypeaheadOptions(JSON_LD);
            expect(result.length).toEqual(JSON_LD.length);
            for (var i = 0, len = JSON_LD.length; i < len; i++) {
                expect(result[i].id).toEqual(JSON_LD[i]['@id']);
                expect(result[i].type).toEqual(JSON_LD[i]['@type']);
                expect(result[i].name).toEqual(JSON_LD[i][JsonLdUtils.RDFS_LABEL]);
                if (JSON_LD[i][JsonLdUtils.RDFS_COMMENT]) {
                    expect(result[i].description).toEqual(JSON_LD[i][JsonLdUtils.RDFS_COMMENT]);
                }
            }
        });

        it('handles transformation of an empty array', () => {
            var result = JsonLdUtils.processTypeaheadOptions([]);
            expect(result).toEqual([]);
        });

        it('handles transformation of null/undefined', () => {
            var result = JsonLdUtils.processTypeaheadOptions(null);
            expect(result).toEqual([]);
            result = JsonLdUtils.processTypeaheadOptions();
            expect(result).toEqual([]);
        });
    });

    describe('getJsonAttValue', () => {
        it('extracts value of a JSON literal value', () => {
            var a = 'a',
                b = true,
                c = 12345,
                d = 'Label',
                obj = {
                    'a': a,
                    'b': b,
                    'c': c
                };
            obj[JsonLdUtils.RDFS_LABEL] = d;
            expect(JsonLdUtils.getJsonAttValue(obj, 'a')).toEqual(a);
            expect(JsonLdUtils.getJsonAttValue(obj, 'b')).toEqual(b);
            expect(JsonLdUtils.getJsonAttValue(obj, 'c')).toEqual(c);
            expect(JsonLdUtils.getJsonAttValue(obj, JsonLdUtils.RDFS_LABEL)).toEqual(d);
        });

        it('extracts value from a JSON value object with tag', () => {
            var label = 'Label',
                obj = {};
            obj[JsonLdUtils.RDFS_LABEL] = {
                '@language': 'en',
                '@value': label
            };
            expect(JsonLdUtils.getJsonAttValue(obj, JsonLdUtils.RDFS_LABEL)).toEqual(label);
        });

        it('returns null if the attribute is not present', () => {
            var obj = {};
            obj[JsonLdUtils.RDFS_LABEL] = {
                '@language': 'en',
                '@value': 'Label'
            };
            expect(JsonLdUtils.getJsonAttValue(obj, JsonLdUtils.RDFS_COMMENT)).toBeNull();
        });

        it('extracts value using the passed in \'by\' attribute', () => {
            var obj = {}, att = 'http://onto.fel.cvut.cz/ontologies/form/has-question-origin', value = 'http://onto.fel.cvut.cz/ontologies/123346';
            obj[att] = {
                '@id': value
            };
            expect(JsonLdUtils.getJsonAttValue(obj, att, '@id')).toEqual(value);
        })
    });

    describe('hasValue', () => {
        it('returns true for literal value of attribute', () => {
            var obj = {}, att = 'http://onto.fel.cvut.cz/ontologies/form/has-question-origin', value = 117;
            obj[att] = value;
            expect(JsonLdUtils.hasValue(obj, att, value)).toBeTruthy();
        });

        it('returns true for value in property array', () => {
            var obj = {}, att = 'http://onto.fel.cvut.cz/ontologies/form/has-question-origin', value = 117;
            obj[att] = [1, 2, 3, 4, 5, value];
            expect(JsonLdUtils.hasValue(obj, att, value)).toBeTruthy();
        });

        it('returns true for object with @id attribute equal to expected value', () => {
            var obj = {}, att = 'http://onto.fel.cvut.cz/ontologies/form/has-question-origin', value = 'http://onto.fel.cvut.cz/ontologies/123346';
            obj[att] = {
                '@id': value
            };
            expect(JsonLdUtils.hasValue(obj, att, value)).toBeTruthy();
        });

        it('returns false for different property value', () => {
            var obj = {}, att = 'http://onto.fel.cvut.cz/ontologies/form/has-question-origin', value = 117;
            obj[att] = 12345;
            expect(JsonLdUtils.hasValue(obj, att, value)).toBeFalsy();
        })
    });

    describe('JSON-LD Utils', () => {

        var data = [
                {
                    "@language": "en",
                    "@value": "Not processed"
                },
                {
                    "@language": "cz",
                    "@value": "Nezpracováno"
                }
            ],
            intl;

        beforeEach(() => {
            intl = {
                defaultLocale: 'en'
            }
        });

        it('extracts localized version of label', () => {
            intl.locale = 'cz';

            var result = JsonLdUtils.getLocalized(data, intl);
            expect(result).toEqual(data[1]['@value']);
        });

        it('falls back to default locale when data does not support current locale', () => {
            intl.locale = 'sp';

            var result = JsonLdUtils.getLocalized(data, intl);
            expect(result).toEqual(data[0]['@value']);
        });

        it('returns null for null/undefined data passed in', () => {
            expect(JsonLdUtils.getLocalized(null, intl)).toBeNull();
            expect(JsonLdUtils.getLocalized(undefined, intl)).toBeNull();
        });
    });
});
