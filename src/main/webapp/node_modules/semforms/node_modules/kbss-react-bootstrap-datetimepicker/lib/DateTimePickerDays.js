"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateTimePickerDays = function (_Component) {
  (0, _inherits3.default)(DateTimePickerDays, _Component);

  function DateTimePickerDays() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, DateTimePickerDays);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(DateTimePickerDays)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.renderDays = function () {
      var cells, classes, days, html, month, nextMonth, prevMonth, minDate, maxDate, row, year;
      year = _this.props.viewDate.year();
      month = _this.props.viewDate.month();
      prevMonth = _this.props.viewDate.clone().subtract(1, "months");
      days = prevMonth.daysInMonth();
      prevMonth.date(days).startOf("week");
      nextMonth = (0, _moment2.default)(prevMonth).clone().add(42, "d");
      minDate = _this.props.minDate ? _this.props.minDate.clone().subtract(1, "days") : _this.props.minDate;
      maxDate = _this.props.maxDate ? _this.props.maxDate.clone() : _this.props.maxDate;
      html = [];
      cells = [];
      while (prevMonth.isBefore(nextMonth)) {
        classes = {
          day: true
        };
        if (prevMonth.year() < year || prevMonth.year() === year && prevMonth.month() < month) {
          classes.old = true;
        } else if (prevMonth.year() > year || prevMonth.year() === year && prevMonth.month() > month) {
          classes.new = true;
        }
        if (prevMonth.isSame((0, _moment2.default)({
          y: _this.props.selectedDate.year(),
          M: _this.props.selectedDate.month(),
          d: _this.props.selectedDate.date()
        }))) {
          classes.active = true;
        }
        if (_this.props.showToday) {
          if (prevMonth.isSame((0, _moment2.default)(), "day")) {
            classes.today = true;
          }
        }
        if (minDate && prevMonth.isBefore(minDate) || maxDate && prevMonth.isAfter(maxDate)) {
          classes.disabled = true;
        }
        if (_this.props.daysOfWeekDisabled.length > 0) classes.disabled = _this.props.daysOfWeekDisabled.indexOf(prevMonth.day()) !== -1;
        cells.push(_react2.default.createElement(
          "td",
          { key: prevMonth.month() + "-" + prevMonth.date(), className: (0, _classnames2.default)(classes), onClick: _this.props.setSelectedDate },
          prevMonth.date()
        ));
        if (prevMonth.weekday() === (0, _moment2.default)().endOf("week").weekday()) {
          row = _react2.default.createElement(
            "tr",
            { key: prevMonth.month() + "-" + prevMonth.date() },
            cells
          );
          html.push(row);
          cells = [];
        }
        prevMonth.add(1, "d");
      }
      return html;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(DateTimePickerDays, [{
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "div",
        { className: "datepicker-days", style: { display: "block" } },
        _react2.default.createElement(
          "table",
          { className: "table-condensed" },
          _react2.default.createElement(
            "thead",
            null,
            _react2.default.createElement(
              "tr",
              null,
              _react2.default.createElement(
                "th",
                { className: "prev", onClick: this.props.subtractMonth },
                "‹"
              ),
              _react2.default.createElement(
                "th",
                { className: "switch", colSpan: "5", onClick: this.props.showMonths },
                _moment2.default.months()[this.props.viewDate.month()],
                " ",
                this.props.viewDate.year()
              ),
              _react2.default.createElement(
                "th",
                { className: "next", onClick: this.props.addMonth },
                "›"
              )
            ),
            _react2.default.createElement(
              "tr",
              null,
              _react2.default.createElement(
                "th",
                { className: "dow" },
                "Su"
              ),
              _react2.default.createElement(
                "th",
                { className: "dow" },
                "Mo"
              ),
              _react2.default.createElement(
                "th",
                { className: "dow" },
                "Tu"
              ),
              _react2.default.createElement(
                "th",
                { className: "dow" },
                "We"
              ),
              _react2.default.createElement(
                "th",
                { className: "dow" },
                "Th"
              ),
              _react2.default.createElement(
                "th",
                { className: "dow" },
                "Fr"
              ),
              _react2.default.createElement(
                "th",
                { className: "dow" },
                "Sa"
              )
            )
          ),
          _react2.default.createElement(
            "tbody",
            null,
            this.renderDays()
          )
        )
      );
    }
  }]);
  return DateTimePickerDays;
}(_react.Component);

DateTimePickerDays.propTypes = {
  subtractMonth: _react.PropTypes.func.isRequired,
  addMonth: _react.PropTypes.func.isRequired,
  viewDate: _react.PropTypes.object.isRequired,
  selectedDate: _react.PropTypes.object.isRequired,
  showToday: _react.PropTypes.bool,
  daysOfWeekDisabled: _react.PropTypes.array,
  setSelectedDate: _react.PropTypes.func.isRequired,
  showMonths: _react.PropTypes.func.isRequired,
  minDate: _react.PropTypes.object,
  maxDate: _react.PropTypes.object
};
DateTimePickerDays.defaultProps = {
  showToday: true
};
exports.default = DateTimePickerDays;