'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _jsonldUtils = require("jsonld-utils");

var _jsonldUtils2 = _interopRequireDefault(_jsonldUtils);

var _jsonld = require("jsonld");

var _jsonld2 = _interopRequireDefault(_jsonld);

var _Constants = require("../constants/Constants");

var _Constants2 = _interopRequireDefault(_Constants);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _JsonObjectMap = require("./JsonObjectMap");

var _JsonObjectMap2 = _interopRequireDefault(_JsonObjectMap);

var _JsonLdObjectUtils = require("./JsonLdObjectUtils");

var _JsonLdObjectUtils2 = _interopRequireDefault(_JsonLdObjectUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FormUtils = function () {
    function FormUtils() {
        (0, _classCallCheck3.default)(this, FormUtils);
    }

    (0, _createClass3.default)(FormUtils, null, [{
        key: "isForm",
        value: function isForm(structure) {
            return _jsonldUtils2.default.hasValue(structure, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.FORM);
        }
    }, {
        key: "isWizardStep",
        value: function isWizardStep(structure) {
            return _jsonldUtils2.default.hasValue(structure, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.WIZARD_STEP);
        }
    }, {
        key: "isSection",
        value: function isSection(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.QUESTION_SECTION);
        }
    }, {
        key: "isAnswerable",
        value: function isAnswerable(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.ANSWERABLE);
        }
    }, {
        key: "isTypeahead",
        value: function isTypeahead(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.QUESTION_TYPEAHEAD);
        }
    }, {
        key: "getPossibleValuesQuery",
        value: function getPossibleValuesQuery(question) {
            return _jsonldUtils2.default.getJsonAttValue(question, _Constants2.default.HAS_OPTIONS_QUERY);
        }
    }, {
        key: "isDisabled",
        value: function isDisabled(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.DISABLED);
        }
    }, {
        key: "isHidden",
        value: function isHidden(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.HIDDEN);
        }
    }, {
        key: "isTextarea",
        value: function isTextarea(question, answerValue) {
            return answerValue && answerValue.length > _Constants2.default.INPUT_LENGTH_THRESHOLD && !FormUtils.isTypeahead(question) || _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.TEXTAREA);
        }
    }, {
        key: "isCalendar",
        value: function isCalendar(question) {
            return FormUtils.isDate(question) || FormUtils.isTime(question) || FormUtils.isDateTime(question);
        }
    }, {
        key: "isDate",
        value: function isDate(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.DATE);
        }
    }, {
        key: "isTime",
        value: function isTime(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.TIME);
        }
    }, {
        key: "isDateTime",
        value: function isDateTime(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.DATETIME);
        }
    }, {
        key: "isCheckbox",
        value: function isCheckbox(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.CHECKBOX);
        }
    }, {
        key: "isMaskedInput",
        value: function isMaskedInput(question) {
            return _jsonldUtils2.default.hasValue(question, _Constants2.default.LAYOUT_CLASS, _Constants2.default.LAYOUT.MASKED_INPUT);
        }
    }, {
        key: "resolveValue",
        value: function resolveValue(answer) {
            if (!answer) {
                return null;
            }
            if (answer[_Constants2.default.HAS_OBJECT_VALUE]) {
                return answer[_Constants2.default.HAS_OBJECT_VALUE]['@id'];
            } else {
                return _jsonldUtils2.default.getJsonAttValue(answer, _Constants2.default.HAS_DATA_VALUE);
            }
        }
    }, {
        key: "resolveValueObject",
        value: function resolveValueObject(answer) {
            if (!answer) {
                return null;
            }
            if (answer[_Constants2.default.HAS_OBJECT_VALUE]) {
                return _Utils2.default.asArray(answer[_Constants2.default.HAS_OBJECT_VALUE])[0];
            }
            if (answer[_Constants2.default.HAS_DATA_VALUE]) {
                return _Utils2.default.asArray(answer[_Constants2.default.HAS_DATA_VALUE])[0];
            }
            return null;
        }
    }, {
        key: "isRelevant",
        value: function isRelevant(question) {

            if (!question[_Constants2.default.IS_RELEVANT_IF]) {
                return true;
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(_Utils2.default.asArray(question[_Constants2.default.IS_RELEVANT_IF])), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var cond = _step.value;


                    if (!FormUtils.testCondition(cond)) {
                        return false;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return true;
        }
    }, {
        key: "isValid",
        value: function isValid(question) {
            var subQ;

            if (question[_Constants2.default.HAS_VALID_ANSWER] === false) {
                return false;
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = (0, _getIterator3.default)(_Utils2.default.asArray(question[_Constants2.default.HAS_SUBQUESTION])), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    subQ = _step2.value;

                    if (this.isValid(subQ) === false) {
                        return false;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return true;
        }
    }, {
        key: "testCondition",
        value: function testCondition(condition) {

            var acceptedValidationsValues = condition[_Constants2.default.ACCEPTS_VALIDATION_VALUE],
                acceptedAnswerValues = condition[_Constants2.default.ACCEPTS_ANSWER_VALUE],
                testedQuestions = condition[_Constants2.default.HAS_TESTED_QUESTION],
                q,
                question;

            if (acceptedValidationsValues && acceptedAnswerValues) {
                console.warn("Support for validation and requirement constraints at same time is not implemented !");
            }

            // valid answers
            if (acceptedValidationsValues && testedQuestions) {

                var arr = _Utils2.default.asArray(acceptedValidationsValues);
                if (arr.length !== 1 || arr[0] !== true && arr[0] !== "true") {
                    console.warn("Validation values other than \"true\" are not implemented !");
                }
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = (0, _getIterator3.default)(_Utils2.default.asArray(testedQuestions)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        q = _step3.value;

                        question = _JsonObjectMap2.default.getObject(q["@id"]);
                        if (question === undefined) {
                            console.warn("Questions is not loaded in an object map.");
                            return true;
                        }
                        if (this.isValid(question) === false) {
                            return false;
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                return true;
            }

            // concrete values
            if (acceptedAnswerValues && testedQuestions) {
                question = _JsonObjectMap2.default.getObject(testedQuestions["@id"]);
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = (0, _getIterator3.default)(_Utils2.default.asArray(acceptedAnswerValues)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var expValue = _step4.value;

                        var answers = _jsonld2.default.getValues(question, _Constants2.default.HAS_ANSWER);

                        if (answers.length === 0) {
                            return false;
                        }
                        var qValue = FormUtils.resolveValueObject(answers[0]);

                        if (qValue && expValue && qValue.hasOwnProperty('@value') && expValue.hasOwnProperty('@id') && qValue['@value'] == expValue['@id']) {
                            // TODO remove !, this is temporary fix as type-ahead component returns data-value instead of code-value
                            return true;
                        }

                        if (_JsonLdObjectUtils2.default.compareValues(qValue, expValue)) {
                            return true;
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }
            return false;
        }
    }]);
    return FormUtils;
}();

exports.default = FormUtils;