'use strict';

// Default bootstrap column count

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COLUMN_COUNT = 12;
var INPUT_LENGTH_THRESHOLD = 50;
var DATETIME_NUMBER_FORMAT = 'x';

var FORM = 'http://onto.fel.cvut.cz/ontologies/documentation/form',
    HAS_SUBQUESTION = 'http://onto.fel.cvut.cz/ontologies/documentation/has_related_question',
    HAS_ANSWER = 'http://onto.fel.cvut.cz/ontologies/documentation/has_answer',
    HAS_OPTION = 'http=//onto.fel.cvut.cz/ontologies/form/has-possible-value',
    HAS_OPTIONS_QUERY = 'http://onto.fel.cvut.cz/ontologies/form/has-possible-values-query',
    HAS_VALUE_TYPE = 'http://onto.fel.cvut.cz/ontologies/form/has-value-type',
    IS_DISABLED = 'http://onto.fel.cvut.cz/ontologies/aviation/form-376/is-disabled',
    INPUT_MASK = 'http://onto.fel.cvut.cz/ontologies/form/has-input-mask',
    LAYOUT_CLASS = 'http://onto.fel.cvut.cz/ontologies/form-layout/has-layout-class',
    LAYOUT = {
    FORM: 'form',
    QUESTION_TYPEAHEAD: 'type-ahead',
    QUESTION_SECTION: 'section',
    WIZARD_STEP: 'wizard-step',
    DISABLED: 'disabled',
    HIDDEN: 'hidden',
    TEXTAREA: 'textarea',
    DATE: 'date',
    TIME: 'time',
    DATETIME: 'datetime',
    CHECKBOX: 'checkbox',
    ANSWERABLE: 'answerable',
    MASKED_INPUT: 'masked-input'
},
    VALUE_TYPE_CODE = 'code',
    VALUE_TYPE_TEXT = 'text',
    GENERATED_ROW_SIZE = 1,
    HAS_QUESTION_ORIGIN = 'http://onto.fel.cvut.cz/ontologies/form/has-question-origin',
    HAS_ANSWER_ORIGIN = 'http://onto.fel.cvut.cz/ontologies/form/has-answer-origin',
    HAS_DATA_VALUE = 'http://onto.fel.cvut.cz/ontologies/documentation/has_data_value',
    HAS_OBJECT_VALUE = 'http://onto.fel.cvut.cz/ontologies/documentation/has_object_value',
    HELP_DESCRIPTION = 'http://purl.org/dc/elements/1.1/description',
    XSD = {
    MAX_EXCLUSIVE: 'http://www.w3.org/2001/XMLSchema#maxExclusive',
    MAX_INCLUSIVE: 'http://www.w3.org/2001/XMLSchema#maxInclusive',
    MIN_EXCLUSIVE: 'http://www.w3.org/2001/XMLSchema#minExclusive',
    MIN_INCLUSIVE: 'http://www.w3.org/2001/XMLSchema#minInclusive',

    INT: 'http://www.w3.org/2001/XMLSchema#int',
    INTEGER: 'http://www.w3.org/2001/XMLSchema#integer',
    NEGATIVE_INTEGER: 'http://www.w3.org/2001/XMLSchema#negativeInteger',
    NON_NEGATIVE_INTEGER: 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',
    NON_POSITIVE_INTEGER: 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',
    POSITIVE_INTEGER: 'http://www.w3.org/2001/XMLSchema#positiveInteger'
},
    ACCEPTS_ANSWER_VALUE = 'http://onto.fel.cvut.cz/ontologies/form/accepts-answer-value',
    HAS_DATATYPE = 'http://onto.fel.cvut.cz/ontologies/form/has-datatype',
    HAS_LAYOUT_CLASS = 'http://onto.fel.cvut.cz/ontologies/form/has-layout-class',
    HAS_POSSIBLE_VALUES_QUERY = 'http://onto.fel.cvut.cz/ontologies/form/has-possible-values-query',
    HAS_REQUIRED_VALUE = 'http://onto.fel.cvut.cz/ontologies/form/has-required-value',
    HAS_TESTED_QUESTION = 'http://onto.fel.cvut.cz/ontologies/form/has-tested-question',
    HAS_UNIT = 'http://onto.fel.cvut.cz/ontologies/form/has-unit',
    HAS_VALID_ANSWER = 'http://onto.fel.cvut.cz/ontologies/form/has-valid-answer',
    IS_RELEVANT_IF = 'http://onto.fel.cvut.cz/ontologies/form/is-relevant-if',
    ACCEPTS_VALIDATION_VALUE = 'http://onto.fel.cvut.cz/ontologies/form/accepts-validation-value',
    HAS_VALIDATION_MESSAGE = 'http://onto.fel.cvut.cz/ontologies/form/has-validation-message',
    NEGATIVE_CONDITION = 'http://onto.fel.cvut.cz/ontologies/form/negative-condition',
    REQUIRES_ANSWER = 'http://onto.fel.cvut.cz/ontologies/form/requires-answer',
    REQUIRES_ANSWER_DESCRIPTION_IF = 'http://onto.fel.cvut.cz/ontologies/form/requires-answer-description-if',
    REQUIRES_ANSWER_IF = 'http://onto.fel.cvut.cz/ontologies/form/requires-answer-if',
    REQUIRES_ANSWER_VALUE = 'http://onto.fel.cvut.cz/ontologies/form/requires-answer-value',
    REQUIRES_DESCRIPTION = 'http://onto.fel.cvut.cz/ontologies/form/requires-description',
    HAS_PRECEDING_QUESTION = 'http://onto.fel.cvut.cz/ontologies/form/has-preceding-question',
    CONDITION = 'http://onto.fel.cvut.cz/ontologies/form/condition',
    HAS_PATTERN = 'http://onto.fel.cvut.cz/ontologies/form-lt/has-pattern';

/**
 * Contains mainly definition of constants used to parse the form declaration.
 */

var Constants = function () {
    function Constants() {
        (0, _classCallCheck3.default)(this, Constants);
    }

    (0, _createClass3.default)(Constants, null, [{
        key: 'COLUMN_COUNT',
        get: function get() {
            return COLUMN_COUNT;
        }
    }, {
        key: 'INPUT_LENGTH_THRESHOLD',
        get: function get() {
            return INPUT_LENGTH_THRESHOLD;
        }
    }, {
        key: 'DATETIME_NUMBER_FORMAT',
        get: function get() {
            return DATETIME_NUMBER_FORMAT;
        }
    }, {
        key: 'FORM',
        get: function get() {
            return FORM;
        }
    }, {
        key: 'HAS_SUBQUESTION',
        get: function get() {
            return HAS_SUBQUESTION;
        }
    }, {
        key: 'HAS_ANSWER',
        get: function get() {
            return HAS_ANSWER;
        }
    }, {
        key: 'HAS_OPTION',
        get: function get() {
            return HAS_OPTION;
        }
    }, {
        key: 'HAS_OPTIONS_QUERY',
        get: function get() {
            return HAS_OPTIONS_QUERY;
        }
    }, {
        key: 'HAS_VALUE_TYPE',
        get: function get() {
            return HAS_VALUE_TYPE;
        }
    }, {
        key: 'IS_RELEVANT_IF',
        get: function get() {
            return IS_RELEVANT_IF;
        }
    }, {
        key: 'IS_DISABLED',
        get: function get() {
            return IS_DISABLED;
        }
    }, {
        key: 'INPUT_MASK',
        get: function get() {
            return INPUT_MASK;
        }
    }, {
        key: 'HAS_DATATYPE',
        get: function get() {
            return HAS_DATATYPE;
        }
    }, {
        key: 'HAS_UNIT',
        get: function get() {
            return HAS_UNIT;
        }
    }, {
        key: 'LAYOUT_CLASS',
        get: function get() {
            return LAYOUT_CLASS;
        }
    }, {
        key: 'LAYOUT',
        get: function get() {
            return LAYOUT;
        }
    }, {
        key: 'VALUE_TYPE_CODE',
        get: function get() {
            return VALUE_TYPE_CODE;
        }
    }, {
        key: 'VALUE_TYPE_TEXT',
        get: function get() {
            return VALUE_TYPE_TEXT;
        }
    }, {
        key: 'GENERATED_ROW_SIZE',
        get: function get() {
            return GENERATED_ROW_SIZE;
        }
    }, {
        key: 'HAS_QUESTION_ORIGIN',
        get: function get() {
            return HAS_QUESTION_ORIGIN;
        }
    }, {
        key: 'HAS_ANSWER_ORIGIN',
        get: function get() {
            return HAS_ANSWER_ORIGIN;
        }
    }, {
        key: 'HAS_DATA_VALUE',
        get: function get() {
            return HAS_DATA_VALUE;
        }
    }, {
        key: 'HAS_OBJECT_VALUE',
        get: function get() {
            return HAS_OBJECT_VALUE;
        }
    }, {
        key: 'HELP_DESCRIPTION',
        get: function get() {
            return HELP_DESCRIPTION;
        }
    }, {
        key: 'XSD',
        get: function get() {
            return XSD;
        }
    }, {
        key: 'ACCEPTS_ANSWER_VALUE',
        get: function get() {
            return ACCEPTS_ANSWER_VALUE;
        }
    }, {
        key: 'HAS_LAYOUT_CLASS',
        get: function get() {
            return HAS_LAYOUT_CLASS;
        }
    }, {
        key: 'HAS_POSSIBLE_VALUES_QUERY',
        get: function get() {
            return HAS_POSSIBLE_VALUES_QUERY;
        }
    }, {
        key: 'HAS_REQUIRED_VALUE',
        get: function get() {
            return HAS_REQUIRED_VALUE;
        }
    }, {
        key: 'HAS_TESTED_QUESTION',
        get: function get() {
            return HAS_TESTED_QUESTION;
        }
    }, {
        key: 'HAS_VALID_ANSWER',
        get: function get() {
            return HAS_VALID_ANSWER;
        }
    }, {
        key: 'ACCEPTS_VALIDATION_VALUE',
        get: function get() {
            return ACCEPTS_VALIDATION_VALUE;
        }
    }, {
        key: 'HAS_VALIDATION_MESSAGE',
        get: function get() {
            return HAS_VALIDATION_MESSAGE;
        }
    }, {
        key: 'NEGATIVE_CONDITION',
        get: function get() {
            return NEGATIVE_CONDITION;
        }
    }, {
        key: 'REQUIRES_ANSWER',
        get: function get() {
            return REQUIRES_ANSWER;
        }
    }, {
        key: 'REQUIRES_ANSWER_DESCRIPTION_IF',
        get: function get() {
            return REQUIRES_ANSWER_DESCRIPTION_IF;
        }
    }, {
        key: 'REQUIRES_ANSWER_IF',
        get: function get() {
            return REQUIRES_ANSWER_IF;
        }
    }, {
        key: 'REQUIRES_ANSWER_VALUE',
        get: function get() {
            return REQUIRES_ANSWER_VALUE;
        }
    }, {
        key: 'REQUIRES_DESCRIPTION',
        get: function get() {
            return REQUIRES_DESCRIPTION;
        }
    }, {
        key: 'HAS_PRECEDING_QUESTION',
        get: function get() {
            return HAS_PRECEDING_QUESTION;
        }
    }, {
        key: 'CONDITION',
        get: function get() {
            return CONDITION;
        }
    }, {
        key: 'HAS_PATTERN',
        get: function get() {
            return HAS_PATTERN;
        }
    }]);
    return Constants;
}();

exports.default = Constants;