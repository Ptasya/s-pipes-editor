"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _getOwnPropertyNames = require("babel-runtime/core-js/object/get-own-property-names");

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

var _reactBootstrap = require("react-bootstrap");

var _DateTimePicker = require("./DateTimePicker.js");

var _DateTimePicker2 = _interopRequireDefault(_DateTimePicker);

var _Constants = require("./Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateTimeField = function (_Component) {
    (0, _inherits3.default)(DateTimeField, _Component);

    function DateTimeField() {
        var _Object$getPrototypeO;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, DateTimeField);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(DateTimeField)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.resolvePropsInputFormat = function () {
            if (_this.props.inputFormat) {
                return _this.props.inputFormat;
            }
            switch (_this.props.mode) {
                case _Constants2.default.MODE_TIME:
                    return "h:mm A";
                case _Constants2.default.MODE_DATE:
                    return "MM/DD/YY";
                default:
                    return "MM/DD/YY h:mm A";
            }
        }, _this.state = {
            showDatePicker: _this.props.mode !== _Constants2.default.MODE_TIME,
            showTimePicker: _this.props.mode === _Constants2.default.MODE_TIME,
            inputFormat: _this.resolvePropsInputFormat(),
            buttonIcon: _this.props.mode === _Constants2.default.MODE_TIME ? "time" : "calendar",
            widgetStyle: {
                display: "block",
                position: "absolute",
                left: -9999,
                zIndex: "9999 !important"
            },
            viewDate: (0, _moment2.default)(_this.props.dateTime, _this.props.format, true).startOf("month"),
            selectedDate: (0, _moment2.default)(_this.props.dateTime, _this.props.format, true),
            inputValue: typeof _this.props.defaultText !== "undefined" ? _this.props.defaultText : (0, _moment2.default)(_this.props.dateTime, _this.props.format, true).format(_this.resolvePropsInputFormat())
        }, _this.componentWillReceiveProps = function (nextProps) {
            var state = {};
            if (nextProps.inputFormat !== _this.props.inputFormat) {
                state.inputFormat = nextProps.inputFormat;
                state.inputValue = (0, _moment2.default)(nextProps.dateTime, nextProps.format, true).format(nextProps.inputFormat);
            }

            if (nextProps.dateTime !== _this.props.dateTime && (0, _moment2.default)(nextProps.dateTime, nextProps.format, true).isValid()) {
                state.viewDate = (0, _moment2.default)(nextProps.dateTime, nextProps.format, true).startOf("month");
                state.selectedDate = (0, _moment2.default)(nextProps.dateTime, nextProps.format, true);
                state.inputValue = (0, _moment2.default)(nextProps.dateTime, nextProps.format, true).format(nextProps.inputFormat ? nextProps.inputFormat : _this.state.inputFormat);
            }
            return _this.setState(state);
        }, _this.onChange = function (event) {
            var value = event.target == null ? event : event.target.value;
            if ((0, _moment2.default)(value, _this.state.inputFormat, true).isValid()) {
                _this.setState({
                    selectedDate: (0, _moment2.default)(value, _this.state.inputFormat, true),
                    viewDate: (0, _moment2.default)(value, _this.state.inputFormat, true).startOf("month")
                });
            }

            return _this.setState({
                inputValue: value
            }, function () {
                return this.props.onChange((0, _moment2.default)(this.state.inputValue, this.state.inputFormat, true).format(this.props.format), value);
            });
        }, _this.getValue = function () {
            return (0, _moment2.default)(_this.state.inputValue, _this.props.inputFormat, true).format(_this.props.format);
        }, _this.setSelectedDate = function (e) {
            var target = e.target;

            if (target.className && !target.className.match(/disabled/g)) {
                var month = void 0;
                if (target.className.indexOf("new") >= 0) month = _this.state.viewDate.month() + 1;else if (target.className.indexOf("old") >= 0) month = _this.state.viewDate.month() - 1;else month = _this.state.viewDate.month();
                return _this.setState({
                    selectedDate: _this.state.viewDate.clone().month(month).date(parseInt(e.target.innerHTML)).hour(_this.state.selectedDate.hours()).minute(_this.state.selectedDate.minutes()).second(_this.state.selectedDate.seconds())
                }, function () {
                    this.closePicker();
                    this.props.onChange(this.state.selectedDate.format(this.props.format));
                    return this.setState({
                        inputValue: this.state.selectedDate.format(this.state.inputFormat)
                    });
                });
            }
        }, _this.setSelectedHour = function (e) {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().hour(parseInt(e.target.innerHTML)).minute(_this.state.selectedDate.minutes()).second(_this.state.selectedDate.seconds())
            }, function () {
                this.closePicker();
                this.props.onChange(this.state.selectedDate.format(this.props.format));
                return this.setState({
                    inputValue: this.state.selectedDate.format(this.state.inputFormat)
                });
            });
        }, _this.setSelectedMinute = function (e) {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().hour(_this.state.selectedDate.hours()).minute(parseInt(e.target.innerHTML)).second(_this.state.selectedDate.seconds())
            }, function () {
                this.closePicker();
                this.props.onChange(this.state.selectedDate.format(this.props.format));
                return this.setState({
                    inputValue: this.state.selectedDate.format(this.state.inputFormat)
                });
            });
        }, _this.setSelectedSecond = function (e) {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().hour(_this.state.selectedDate.hours()).minute(_this.state.selectedDate.minutes()).second(parseInt(e.target.innerHTML))
            }, function () {
                this.closePicker();
                this.props.onChange(this.state.selectedDate.format(this.props.format));
                return this.setState({
                    inputValue: this.state.selectedDate.format(this.state.inputFormat)
                });
            });
        }, _this.setViewMonth = function (month) {
            return _this.setState({
                viewDate: _this.state.viewDate.clone().month(month)
            });
        }, _this.setViewYear = function (year) {
            return _this.setState({
                viewDate: _this.state.viewDate.clone().year(year)
            });
        }, _this.addSecond = function () {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().add(1, 'seconds')
            }, function () {
                this.props.onChange(this.state.selectedDate.format(this.props.format));
                return this.setState({
                    inputValue: this.state.selectedDate.format(this.resolvePropsInputFormat())
                });
            });
        }, _this.addMinute = function () {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().add(1, "minutes")
            }, function () {
                this.props.onChange(this.state.selectedDate.format(this.props.format));
                return this.setState({
                    inputValue: this.state.selectedDate.format(this.resolvePropsInputFormat())
                });
            });
        }, _this.addHour = function () {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().add(1, "hours")
            }, function () {
                this.props.onChange(this.state.selectedDate.format(this.props.format));
                return this.setState({
                    inputValue: this.state.selectedDate.format(this.resolvePropsInputFormat())
                });
            });
        }, _this.addMonth = function () {
            return _this.setState({
                viewDate: _this.state.viewDate.add(1, "months")
            });
        }, _this.addYear = function () {
            return _this.setState({
                viewDate: _this.state.viewDate.add(1, "years")
            });
        }, _this.addDecade = function () {
            return _this.setState({
                viewDate: _this.state.viewDate.add(10, "years")
            });
        }, _this.subtractSecond = function () {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().subtract(1, 'seconds')
            }, function () {
                this.props.onChange(this.state.selectedDate.format(this.props.format));
                return this.setState({
                    inputValue: this.state.selectedDate.format(this.resolvePropsInputFormat())
                });
            });
        }, _this.subtractMinute = function () {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().subtract(1, "minutes")
            }, function () {
                _this.props.onChange(_this.state.selectedDate.format(_this.props.format));
                return _this.setState({
                    inputValue: _this.state.selectedDate.format(_this.resolvePropsInputFormat())
                });
            });
        }, _this.subtractHour = function () {
            return _this.setState({
                selectedDate: _this.state.selectedDate.clone().subtract(1, "hours")
            }, function () {
                _this.props.onChange(_this.state.selectedDate.format(_this.props.format));
                return _this.setState({
                    inputValue: _this.state.selectedDate.format(_this.resolvePropsInputFormat())
                });
            });
        }, _this.subtractMonth = function () {
            return _this.setState({
                viewDate: _this.state.viewDate.subtract(1, "months")
            });
        }, _this.subtractYear = function () {
            return _this.setState({
                viewDate: _this.state.viewDate.subtract(1, "years")
            });
        }, _this.subtractDecade = function () {
            return _this.setState({
                viewDate: _this.state.viewDate.subtract(10, "years")
            });
        }, _this.togglePeriod = function () {
            if (_this.state.selectedDate.hour() > 12) {
                return _this.onChange(_this.state.selectedDate.clone().subtract(12, "hours").format(_this.state.inputFormat));
            } else {
                return _this.onChange(_this.state.selectedDate.clone().add(12, "hours").format(_this.state.inputFormat));
            }
        }, _this.togglePicker = function () {
            return _this.setState({
                showDatePicker: !_this.state.showDatePicker,
                showTimePicker: !_this.state.showTimePicker
            });
        }, _this.onClick = function () {
            var classes = void 0,
                gBCR = void 0,
                offset = void 0,
                placePosition = void 0,
                scrollTop = void 0,
                styles = void 0;
            if (_this.state.showPicker) {
                return _this.closePicker();
            } else {
                _this.setState({
                    showPicker: true
                });
                gBCR = _this.refs.dtpbutton.getBoundingClientRect();
                classes = {
                    "bootstrap-datetimepicker-widget": true,
                    "dropdown-menu": true
                };
                offset = {
                    top: gBCR.top + window.pageYOffset - document.documentElement.clientTop,
                    left: gBCR.left + window.pageXOffset - document.documentElement.clientLeft
                };
                offset.top = offset.top + _this.refs.datetimepicker.offsetHeight;
                scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
                placePosition = _this.props.direction === "up" ? "top" : _this.props.direction === "bottom" ? "bottom" : _this.props.direction === "auto" ? offset.top + _this.refs.widget.offsetHeight > window.offsetHeight + scrollTop && _this.refs.widget.offsetHeight + _this.refs.datetimepicker.offsetHeight > offset.top ? "top" : "bottom" : void 0;
                if (placePosition === "top") {
                    offset.top = -_this.refs.widget.offsetHeight - _this.clientHeight - 2;
                    classes.top = true;
                    classes.bottom = false;
                    classes["pull-right"] = true;
                } else {
                    offset.top = 40;
                    classes.top = false;
                    classes.bottom = true;
                    classes["pull-right"] = true;
                }
                styles = {
                    display: "block",
                    position: "absolute",
                    top: offset.top,
                    left: "auto",
                    right: 40
                };
                return _this.setState({
                    widgetStyle: styles,
                    widgetClasses: classes
                });
            }
        }, _this.closePicker = function () {
            var style = _this.cloneStyle(_this.state.widgetStyle);
            style.left = -9999;
            style.display = "none";
            return _this.setState({
                showPicker: false,
                widgetStyle: style
            });
        }, _this.cloneStyle = function (style) {
            var clone = {};
            (0, _getOwnPropertyNames2.default)(style).forEach(function (prop) {
                clone[prop] = style[prop];
            });
            return clone;
        }, _this.size = function () {
            switch (_this.props.size) {
                case _Constants2.default.SIZE_SMALL:
                    return "form-group-sm";
                case _Constants2.default.SIZE_LARGE:
                    return "form-group-lg";
            }

            return "";
        }, _this.renderOverlay = function () {
            var styles = {
                position: "fixed",
                top: 0,
                bottom: 0,
                left: 0,
                right: 0,
                zIndex: "999"
            };
            if (_this.state.showPicker) {
                return _react2.default.createElement("div", { onClick: _this.closePicker, style: styles });
            } else {
                return _react2.default.createElement("span", null);
            }
        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(DateTimeField, [{
        key: "render",
        value: function render() {
            return _react2.default.createElement(
                "div",
                null,
                this.renderOverlay(),
                _react2.default.createElement(_DateTimePicker2.default, {
                    addDecade: this.addDecade,
                    addHour: this.addHour,
                    addMinute: this.addMinute,
                    addMonth: this.addMonth,
                    addSecond: this.addSecond,
                    addYear: this.addYear,
                    daysOfWeekDisabled: this.props.daysOfWeekDisabled,
                    maxDate: this.props.maxDate,
                    minDate: this.props.minDate,
                    mode: this.props.mode,
                    ref: "widget",
                    selectedDate: this.state.selectedDate,
                    setSelectedDate: this.setSelectedDate,
                    setSelectedHour: this.setSelectedHour,
                    setSelectedMinute: this.setSelectedMinute,
                    setSelectedSecond: this.setSelectedSecond,
                    setViewMonth: this.setViewMonth,
                    setViewYear: this.setViewYear,
                    showDatePicker: this.state.showDatePicker,
                    showTimePicker: this.state.showTimePicker,
                    showToday: this.props.showToday,
                    subtractDecade: this.subtractDecade,
                    subtractHour: this.subtractHour,
                    subtractMinute: this.subtractMinute,
                    subtractMonth: this.subtractMonth,
                    subtractSecond: this.subtractSecond,
                    subtractYear: this.subtractYear,
                    togglePeriod: this.togglePeriod,
                    togglePicker: this.togglePicker,
                    viewDate: this.state.viewDate,
                    viewMode: this.props.viewMode,
                    widgetClasses: this.state.widgetClasses,
                    widgetStyle: this.state.widgetStyle
                }),
                _react2.default.createElement(
                    "div",
                    { className: "input-group date " + this.size(), ref: "datetimepicker" },
                    _react2.default.createElement("input", (0, _extends3.default)({ className: "form-control", onChange: this.onChange, type: "text",
                        value: this.state.inputValue }, this.props.inputProps)),
                    _react2.default.createElement(
                        "span",
                        { className: "input-group-addon", onBlur: this.onBlur, onClick: this.onClick, ref: "dtpbutton" },
                        _react2.default.createElement(_reactBootstrap.Glyphicon, { glyph: this.state.buttonIcon })
                    )
                )
            );
        }
    }]);
    return DateTimeField;
}(_react.Component);

DateTimeField.defaultProps = {
    dateTime: (0, _moment2.default)().format("x"),
    format: "x",
    showToday: true,
    viewMode: "days",
    daysOfWeekDisabled: [],
    size: _Constants2.default.SIZE_MEDIUM,
    mode: _Constants2.default.MODE_DATETIME,
    onChange: function onChange(x) {
        console.log(x);
    }
};
DateTimeField.propTypes = {
    dateTime: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
    onChange: _react.PropTypes.func,
    format: _react.PropTypes.string,
    inputProps: _react.PropTypes.object,
    inputFormat: _react.PropTypes.string,
    defaultText: _react.PropTypes.string,
    mode: _react.PropTypes.oneOf([_Constants2.default.MODE_DATE, _Constants2.default.MODE_DATETIME, _Constants2.default.MODE_TIME]),
    minDate: _react.PropTypes.object,
    maxDate: _react.PropTypes.object,
    direction: _react.PropTypes.string,
    showToday: _react.PropTypes.bool,
    viewMode: _react.PropTypes.string,
    size: _react.PropTypes.oneOf([_Constants2.default.SIZE_SMALL, _Constants2.default.SIZE_MEDIUM, _Constants2.default.SIZE_LARGE]),
    daysOfWeekDisabled: _react.PropTypes.arrayOf(_react.PropTypes.number)
};
exports.default = DateTimeField;