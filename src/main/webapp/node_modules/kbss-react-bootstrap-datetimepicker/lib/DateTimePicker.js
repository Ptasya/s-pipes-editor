"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require("react-bootstrap");

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _DateTimePickerDate = require("./DateTimePickerDate.js");

var _DateTimePickerDate2 = _interopRequireDefault(_DateTimePickerDate);

var _DateTimePickerTime = require("./DateTimePickerTime.js");

var _DateTimePickerTime2 = _interopRequireDefault(_DateTimePickerTime);

var _Constants = require("./Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateTimePicker = function (_Component) {
    (0, _inherits3.default)(DateTimePicker, _Component);

    function DateTimePicker() {
        var _Object$getPrototypeO;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, DateTimePicker);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(DateTimePicker)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.renderDatePicker = function () {
            if (_this.props.showDatePicker) {
                return _react2.default.createElement(
                    "li",
                    null,
                    _react2.default.createElement(_DateTimePickerDate2.default, {
                        addDecade: _this.props.addDecade,
                        addMonth: _this.props.addMonth,
                        addYear: _this.props.addYear,
                        daysOfWeekDisabled: _this.props.daysOfWeekDisabled,
                        maxDate: _this.props.maxDate,
                        minDate: _this.props.minDate,
                        selectedDate: _this.props.selectedDate,
                        setSelectedDate: _this.props.setSelectedDate,
                        setViewMonth: _this.props.setViewMonth,
                        setViewYear: _this.props.setViewYear,
                        showToday: _this.props.showToday,
                        subtractDecade: _this.props.subtractDecade,
                        subtractMonth: _this.props.subtractMonth,
                        subtractYear: _this.props.subtractYear,
                        viewDate: _this.props.viewDate,
                        viewMode: _this.props.viewMode
                    })
                );
            }
        }, _this.renderTimePicker = function () {
            if (_this.props.showTimePicker) {
                return _react2.default.createElement(
                    "li",
                    null,
                    _react2.default.createElement(_DateTimePickerTime2.default, {
                        addHour: _this.props.addHour,
                        addMinute: _this.props.addMinute,
                        addSecond: _this.props.addSecond,
                        mode: _this.props.mode,
                        selectedDate: _this.props.selectedDate,
                        setSelectedHour: _this.props.setSelectedHour,
                        setSelectedMinute: _this.props.setSelectedMinute,
                        setSelectedSecond: _this.props.setSelectedSecond,
                        subtractHour: _this.props.subtractHour,
                        subtractMinute: _this.props.subtractMinute,
                        subtractSecond: _this.props.subtractSecond,
                        togglePeriod: _this.props.togglePeriod,
                        viewDate: _this.props.viewDate
                    })
                );
            }
        }, _this.renderSwitchButton = function () {
            return _this.props.mode === _Constants2.default.MODE_DATETIME ? _react2.default.createElement(
                "li",
                null,
                _react2.default.createElement(
                    "span",
                    { className: "btn picker-switch", style: { width: "100%" },
                        onClick: _this.props.togglePicker },
                    _react2.default.createElement(_reactBootstrap.Glyphicon, {
                        glyph: _this.props.showTimePicker ? "calendar" : "time" })
                )
            ) : null;
        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(DateTimePicker, [{
        key: "render",
        value: function render() {
            return _react2.default.createElement(
                "div",
                { className: (0, _classnames2.default)(this.props.widgetClasses), style: this.props.widgetStyle },
                _react2.default.createElement(
                    "ul",
                    { className: "list-unstyled" },
                    this.renderDatePicker(),
                    this.renderSwitchButton(),
                    this.renderTimePicker()
                )
            );
        }
    }]);
    return DateTimePicker;
}(_react.Component);

DateTimePicker.propTypes = {
    showDatePicker: _react.PropTypes.bool,
    showTimePicker: _react.PropTypes.bool,
    subtractMonth: _react.PropTypes.func.isRequired,
    addSecond: _react.PropTypes.func.isRequired,
    subtractSecond: _react.PropTypes.func.isRequired,
    addMonth: _react.PropTypes.func.isRequired,
    viewDate: _react.PropTypes.object.isRequired,
    selectedDate: _react.PropTypes.object.isRequired,
    showToday: _react.PropTypes.bool,
    viewMode: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
    mode: _react.PropTypes.oneOf([_Constants2.default.MODE_DATE, _Constants2.default.MODE_DATETIME, _Constants2.default.MODE_TIME]),
    daysOfWeekDisabled: _react.PropTypes.array,
    setSelectedDate: _react.PropTypes.func.isRequired,
    subtractYear: _react.PropTypes.func.isRequired,
    addYear: _react.PropTypes.func.isRequired,
    setViewMonth: _react.PropTypes.func.isRequired,
    setViewYear: _react.PropTypes.func.isRequired,
    subtractHour: _react.PropTypes.func.isRequired,
    addHour: _react.PropTypes.func.isRequired,
    subtractMinute: _react.PropTypes.func.isRequired,
    addMinute: _react.PropTypes.func.isRequired,
    addDecade: _react.PropTypes.func.isRequired,
    subtractDecade: _react.PropTypes.func.isRequired,
    togglePeriod: _react.PropTypes.func.isRequired,
    minDate: _react.PropTypes.object,
    maxDate: _react.PropTypes.object,
    widgetClasses: _react.PropTypes.object,
    widgetStyle: _react.PropTypes.object,
    togglePicker: _react.PropTypes.func,
    setSelectedHour: _react.PropTypes.func,
    setSelectedMinute: _react.PropTypes.func,
    setSelectedSecond: _react.PropTypes.func
};
exports.default = DateTimePicker;